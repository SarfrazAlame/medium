generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model VerificationToken {
  id         Int      @id @default(autoincrement())
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String? @db.Text
  access_token       String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?
  oauth_token_secret String?
  oauth_token        String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId       String

  @@index([userId])
}

model User {
  id            String      @id @default(cuid())
  name          String
  email         String     @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime    @default(now()) @map(name: "created_at")
  updatedAt     DateTime    @updatedAt @map(name: "updated_at")
  posts         Post[]
  saved         SavedPost[]
  claps         Claps[]
  response      Response[]
  following     Follows[]   @relation("follower")
  followedBy    Follows[]   @relation("following")
  accounts      Account[]
  sessions      Session[]

  @@map(name: "users")
}

model Post {
  id        String   @id @default(uuid())
  title     String
  story     String
  fileUrl   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String
  user     User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  claps    Claps[]
  response Response[]
  savePost SavedPost[]
}

model Claps {
  id        String   @id @default(uuid())
  userId    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
  user   User   @relation(fields: [userId], references: [id])

  @@index([userId])
}

model Response {
  id     String  @id @default(uuid())
  userId String
  body   String?

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id],onDelete: Cascade)
}

model SavedPost {
  id     String @id @default(uuid())
  userId String

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id],onDelete: Cascade)

  @@index([userId])
}

model Follows {
  follower    User   @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followerId  String
  following   User   @relation("following", fields: [followingId], references: [id], onDelete: Cascade)
  followingId String

  @@id([followerId, followingId])
  @@index([followerId])
  @@index([followingId])
}
